// <auto-generated />
using System;
using IlanSistemi.DataAccess.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IlanSistemi.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230614100717_CategoryAdvertsDebug")]
    partial class CategoryAdvertsDebug
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 14, 13, 7, 17, 523, DateTimeKind.Local).AddTicks(6797),
                            Description = "Sahibinden garantisiz laptop",
                            Title = "Laptop Bal Almayan Mal",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 14, 13, 7, 17, 523, DateTimeKind.Local).AddTicks(6802),
                            Description = "Yürüyeni iyi uçak",
                            Title = "Yürüyen Uçak",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 14, 13, 7, 17, 523, DateTimeKind.Local).AddTicks(6803),
                            Description = "Krediye uygun gemicik",
                            Title = "Gemicik",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.AdvertComment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AdvertId1")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId1");

                    b.HasIndex("UserId");

                    b.ToTable("advertComments");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.AdvertImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.ToTable("AdvertImages");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Elektronik eşyalar",
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Envai çeşit sizi çıplaklıktan koruyacak kıyafetler.",
                            Name = "Moda"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ev Tekstili, Mutfak Gereçleri",
                            Name = "Ev, Yaşam"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Aradığınız tüm spor ürünleri",
                            Name = "Spor, Outdoor"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kişisel bakım ve makyaj malzemeleri",
                            Name = "Kozmetik"
                        });
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.CategoryAdvert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdvertId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CategoryId");

                    b.ToTable("categoryAdverts");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("pages");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Türkiye",
                            CreatedAt = new DateTime(2023, 6, 14, 13, 7, 17, 523, DateTimeKind.Local).AddTicks(6656),
                            Email = "sample@user.com",
                            Name = "Sample",
                            Password = "123456",
                            Phone = "0543212340"
                        });
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Advert", b =>
                {
                    b.HasOne("IlanSistemi.Entities.Concrete.User", "User")
                        .WithMany("adverts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.AdvertComment", b =>
                {
                    b.HasOne("IlanSistemi.Entities.Concrete.Advert", null)
                        .WithMany("advertComments")
                        .HasForeignKey("AdvertId1");

                    b.HasOne("IlanSistemi.Entities.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IlanSistemi.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IlanSistemi.Entities.Concrete.User", null)
                        .WithMany("advertComments")
                        .HasForeignKey("UserId");

                    b.Navigation("Advert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.AdvertImage", b =>
                {
                    b.HasOne("IlanSistemi.Entities.Concrete.Advert", "adverts")
                        .WithMany("advertImages")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("adverts");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.CategoryAdvert", b =>
                {
                    b.HasOne("IlanSistemi.Entities.Concrete.Advert", "Advert")
                        .WithMany("categoryAdverts")
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IlanSistemi.Entities.Concrete.Category", "Category")
                        .WithMany("categoryAdverts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Setting", b =>
                {
                    b.HasOne("IlanSistemi.Entities.Concrete.User", "User")
                        .WithMany("settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Advert", b =>
                {
                    b.Navigation("advertComments");

                    b.Navigation("advertImages");

                    b.Navigation("categoryAdverts");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.Category", b =>
                {
                    b.Navigation("categoryAdverts");
                });

            modelBuilder.Entity("IlanSistemi.Entities.Concrete.User", b =>
                {
                    b.Navigation("advertComments");

                    b.Navigation("adverts");

                    b.Navigation("settings");
                });
#pragma warning restore 612, 618
        }
    }
}
